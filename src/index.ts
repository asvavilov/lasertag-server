import express, { Express, Request, Response } from "express";
import dotenv from "dotenv";
import * as util from 'util';

dotenv.config();

const app: Express = express();
const port = process.env.PORT || 3000;

app.use(express.json());

/*
app.get("/ronin-bot", (req: Request, res: Response) => {
	console.log(process.env)
	const url = `https://api.telegram.org/bot${process.env.BOT_ID}:${process.env.BOT_SECRET}/sendMessage`;
	const text = 'hello from express';
	console.log(url)
	fetch(url, {
		method: 'POST',
		headers: {
      'Content-Type': 'application/json'
    },
		body: JSON.stringify({
			chat_id: process.env.TEST_GROUP,
			text: text
		})
	});
	res.send();
});
*/

function sendMessage(message: any, text: string) {
	const url = `https://api.telegram.org/bot${process.env.BOT_ID}:${process.env.BOT_SECRET}/sendMessage`;
	fetch(url, {
		method: 'POST',
		headers: {
      'Content-Type': 'application/json'
    },
		body: JSON.stringify({
			chat_id: message.chat.id,
			reply_to_message_id: ['group', 'supergroup'].includes(message.chat.type) ? message.message_id : undefined,
			text: text
		})
	});
}

function validAge(message: any) {
	const now = (new Date()).getTime() / 1000;
	return now < message.date + 10;
}

function validSource(message: any) {
	return [process.env.ME].includes(String(message.from.id))
		|| [process.env.TEST_GROUP, process.env.RONIN_GROUP].includes(String(message.chat.id))
	;
}

function canParse(message: any) {
	return !!message
		&& !message.from.is_bot // –±–æ—Ç
		&& !!message.text
		&& !message.message_thread_id // –æ—Ç–≤–µ—Ç
		&& !message.link_preview_options // —Å—Å—ã–ª–∫–∞
		&& validSource(message) // –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
		&& validAge(message) // –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —Å—Ç–∞—Ä–æ–µ
	;
}

function skipFriday() {
	const vars = [
		'–°–µ–≥–æ–¥–Ω—è –Ω–µ –ø—è—Ç–Ω–∏—Ü–∞.',
		'‚ï≠‚à©‚ïÆ( ‚Ä¢ÃÄ_‚Ä¢ÃÅ )‚ï≠‚à©‚ïÆ',
		'¬Ø\\_(„ÉÑ)_/¬Ø',
		'‚ïÆ (. ‚ùõ ·¥ó ‚ùõ.) ‚ï≠',
		'üëÖ',
	];
	return vars[Math.floor(Math.random() * vars.length)];
}

function skipBoobs() {
	const vars = [
		'–°–µ–≥–æ–¥–Ω—è –Ω–µ –ø—è—Ç–Ω–∏—Ü–∞.',
		'–°–µ–≥–æ–¥–Ω—è —Å–∏—Å–µ–∫ –Ω–µ –∑–∞–≤–µ–∑–ª–∏. –ó–∞—Ö–æ–¥–∏—Ç–µ –≤ –ø—è—Ç–Ω–∏—Ü—É.',
		'–í –ø—è—Ç–Ω–∏—Ü—É –ø–æ–ª—É—á–∏—à—å.',
		'‚ï≠‚à©‚ïÆ( ‚Ä¢ÃÄ_‚Ä¢ÃÅ )‚ï≠‚à©‚ïÆ',
		'¬Ø\\_(„ÉÑ)_/¬Ø',
		'‚ïÆ (. ‚ùõ ·¥ó ‚ùõ.) ‚ï≠',
		'üëÖ',
		'(Ôºæ‚ó°Ôºæ)„Å£‚úÇ‚ï∞‚ãÉ‚ïØ',
	];
	return vars[Math.floor(Math.random() * vars.length)];
}

function boobs() {
	const vars = [
		'(.)(.)',
		'( ‚Ä¢ )( ‚Ä¢ )',
		'( . Y . )',
		'( ‚Ä¢ )( ‚Ä¢ )‘Ö(‚âñ‚Äø‚âñ‘Ö)',
		'( ‚Ä¢ )( ‚Ä¢ )‘Ö(‚Äæ‚å£‚Äæ‘Ö)',
		'( ‚Ä¢ )( ‚Ä¢ )‘Ö(‚âñ‚å£‚âñ‘Ö)',
		'Ôºà(‚óé)Ôºø(‚óé)Ôºâ',
		'(. | .)',
		'//o-o\\',
		'( ‡πè ‰∫∫ ‡πè )',
		'( .  ‰∫∫  . )',
		'(‚ÄØÕú‚Çí „ÖÖ‚ÄØÕú ‚Çí)',
		'(‚ÄØÕú. „ÖÖ‚ÄØÕú. )ü•õ yumy',
		'( . ‰∫∫ . )',
		'(‚ÄØÕú. „ÖÖ‚ÄØÕú. )',
		'üëâ( . )( . ) üëà',
		'(‡πè ‰∫∫ ‡πè)',
		'( Õú‚Çí „ÖÖ Õú ‚Çí)·Éö(¬¥⁄°`·Éö)',
		'( ‚Ä¢ ) ( ‚Ä¢ )-----(‚âñ_‚âñ)',
		'I ‚ô° ( . )( . )',
		'(Õú‚Çí „ÖÖ Õú ‚Çí)',
		'üçí',
		'(   +   )   (   +   )',
	];
	return vars[Math.floor(Math.random() * vars.length)];
}

function butts() {
	const vars = [
		'ü´±( ‚Äø * ‚Äø )ü´≤',
		'(‚ÄøÀ†‚Äø)',
		'(‚Äø‚à£‚Äø) slap ü§§',
		'(‚ÄøÀ†‚Äø) ‘Ö(‚Äæ‚å£‚Äæ‘Ö)',
		'( ‚Äø ‰∫∫ ‚Äø )',
		'(_!_) - –∂–æ–ø–∞ –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–∞—è',
		'(__!__) - –∂–∏—Ä–Ω–∞—è –∂–æ–ø–∞',
		'(_._) - –∂–æ–ø–∞ –ø–ª–æ—Å–∫–∞—è',
		'(!) - —Ç–æ—â–∞—è –∂–æ–ø–∞',
		'{_!_} - —à–∏–∫–∞—Ä–Ω–∞—è –∂–æ–ø–∞',
		'(_*_) - –≥–µ–º–æ—Ä—Ä–æ–π–Ω–∞—è –∂–æ–ø–∞',
		'(_zzz_) - –∂–æ–ø–∞ —É—Å—Ç–∞–ª–∞—è',
		'(_?_) - –∂–æ–ø–∞ –±–µ–∑–º–æ–∑–≥–ª–∞—è',
		'(_–æ_) - –∂–æ–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è',
		'(_0_) - –º–Ω–æ–≥–æ —Ä–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è',
		'(_$_) - –Ω–æ–≤–æ—Ä—É—Å—Å–∫–∞—è –∂–æ–ø–∞',
		'(_x_) - –ø–æ—Ü–µ–ª—É–π –º–µ–Ω—è –≤ –∂–æ–ø—É!',
		'(_–•_) - –æ—Å—Ç–∞–≤—å –º–æ—é –∂–æ–ø—É –≤ –ø–æ–∫–æ–µ!',
		'(_^_) - –∑–∞–Ω–æ—Å—á–∏–≤–∞—è –∂–æ–ø–∞.',
		'(–ñ–æ–ñ) - –≤–æ–ª–æ—Å–∞—Ç–∞—è –∂–æ–ø–∞',
		'("|") - –≤–æ–ª–æ—Å–∞—Ç–∞—è –∂–æ–ø–∞',
		'. - –∂–æ–ø–∞, –≤–∏–¥ –∏–∑ –∫–æ—Å–º–æ—Å–∞',
		'(_~_) - —Ö–∏—Ç—Ä–∞—è –∂–æ–ø–∞',
		'(_:-)_) - –æ—á–µ–Ω—å —Ö–∏—Ç—Ä–∞—è –∂–æ–ø–∞',
		'_e=mc2_) - —É–º–Ω–∞—è –∂–æ–ø–∞',
		'(_–™_) - —Ç–≤–µ—Ä–¥–∞—è –∂–æ–ø–∞',
		'(_–¨_) - –º—è–≥–∫–∞—è –∂–æ–ø–∞',
		'(_GO_) - –∏–¥–∏ –≤ –∂–æ–ø—É',
		'->(_!_) –ø–æ—à–µ–ª –≤ –∂–æ–ø—É',
		'(_!_)-> –∫–∞–∫ –∏–∑ –∂–æ–ø—ã',
		'(_SOS_) - –∂–æ–ø–∞ –≤ –±–µ–¥–µ',
		'(_#_) - –∂–æ–ø–∞ –∑–µ–∫–∞',
		'{-------O-------} –æ—á–µ–Ω—å –±–æ–ª—å—à–∞—è –∂–æ–ø–∞',
		//'"–ö–†–´–õ–ê–¢–´–ï" –ñ–û–ü–´',
		'(_100%_) - –ø–æ–ª–Ω–∞—è –∂–æ–ø–∞ (–∫—Ä—ã–ª–∞—Ç–∞—è —Ñ—Ä–∞–∑–∞)',
		'(_!_)] - –∂–æ–ø–∞ —Å —Ä—É—á–∫–æ–π',
		'(_!_)S - –∂–æ–ø–∞ —Å —Ä—É—á–∫–æ–π',
		'->(_!_)-> —á–µ—Ä–µ–∑ –∂–æ–ø—É (–¥–µ–ª–∞—Ç—å —á—Ç–æ-–ª–∏–±–æ)',
		'(_=_) –∫–∞–∫–∞—è, –≤ –∂–æ–ø—É, —Ä–∞–∑–Ω–∏—Ü–∞?',
		//'–ö–û–†–û–¢–ö–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø',
		'(_–Ø_) - –Ø –≤ –∂–æ–ø–µ...',
		'(__–Ø__) - –Ø –≤ –ø–æ–ª–Ω–æ–π –∂–æ–ø–µ...',
		'(_–ú—ã_) - –ú—ã –≤ –∂–æ–ø–µ:',
		'(_->._) - –ò–¥–∏ –≤ –∂–æ–ø—É!',
		//'–∫(_!_)–≠ - –∂–æ–ø–∞ —Å —É—à–∞–º–∏',
		'c( o ) - –∂–æ–ø–∞ —Å —Ä—É—á–∫–æ–π',
		'(_!_)(___!___)(_!_)(__!__) - –†–æ–Ω–∏–Ω—ã –Ω–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏...',
	];
	return vars[Math.floor(Math.random() * vars.length)];
}

function oleg() {
	const vars = [
		'üí™üèª',
		'üèã',
		'üí™',
		'üèãÔ∏è‚Äç‚ôÇÔ∏è',
		'üèãüèΩ‚Äç‚ôÇÔ∏è',
		'üèãÔ∏è',
		'üèãüèº',
		'üèãüèø',
		'üèãÔ∏è‚Äç‚ôÄÔ∏è',
		'üèãüèª‚Äç‚ôÇÔ∏è',
		'üí™üèº',
		'üèãüèº‚Äç‚ôÇÔ∏è',
		'üí™üèø',
		'üèãüèª‚Äç‚ôÄÔ∏è',
		'üèãüèΩ',
		'üèãüèæ‚Äç‚ôÇÔ∏è',
		'üèãüèª',
		'üèãüèø‚Äç‚ôÇÔ∏è',
	];
	return vars[Math.floor(Math.random() * vars.length)];
}

function getInfo(message: any) {
	const now = new Date();

	const mention = Array.isArray(message.entities)
		? !!message.entities.find((ent: any) => ent.type === 'mention' && message.text.substring(ent.offset, ent.offset + ent.length) === process.env.BOT)
		: false
	;

	return {
		boobs: (new RegExp('—Å–∏—Å—å–∫[–∞—É–∏]|—Å–∏—Å–µ–∫|—Ç–∏—Ç—å–∫[–∞—É–∏]|—Ç–∏—Ç–µ–∫|—Å–∏—Å[—è–∏]', 'i')).test(message.text),
		friday: (new RegExp('–ø—è—Ç–Ω–∏—Ü.?', 'i')).test(message.text),
		butts: (new RegExp('–∂–æ–ø[–∞—É–µ—ã]', 'i')).test(message.text),
		oleg: (new RegExp('(?<![–∞-—è—ë])–æ–ª–µ–≥.?(?![–∞-—è—ë])', 'i')).test(message.text),
		nowFriday: now.getDay() === 5,
		mention: mention,
		me: String(message.from.id) === process.env.ME,
	};
}

function processing(message: any) {
	if (!canParse(message)) {
		return;
	}

	const info = getInfo(message);

	//console.log(`processing...\n${message.text}`);
	console.log(util.inspect(info, { showHidden: true, depth: null }));

	if (info.mention) {
		sendMessage(message, info.me ? '–°–ª—É—à–∞—é—Å—å –∏ –ø–æ–≤–∏–Ω—É—é—Å—å, –º–æ–π –ø–æ–≤–µ–ª–∏—Ç–µ–ª—å!' : '–¢—ã –∫—Ç–æ —Ç–∞–∫–æ–π? –î–∞–≤–∞–π –¥–æ—Å–≤–∏–¥–∞–Ω—å—è!');
	}
	else if (info.boobs || info.friday) {
		sendMessage(message,
			(
				info.nowFriday
				? boobs()
				: (
						info.friday
						? skipFriday()
						: skipBoobs()
					)
			)
		);
	} else if (info.butts) {
		sendMessage(message, butts());
	} else if (info.oleg) {
		sendMessage(message, oleg());
	}
}

app.post("/ronin-bot", (req: Request, res: Response) => {
	//console.log(req);
	//console.log(req.headers);
	//console.log(req.body);
	console.log(util.inspect(req.body, { showHidden: true, depth: null }));

	processing(req.body.message);

	res.send();
});

app.listen(port, () => {
	console.log(`[server]: Server is running at http://localhost:${port}`);
});
